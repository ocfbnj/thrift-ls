{
    "name": "Thrift",
    "scopeName": "source.thrift",
    "fileTypes": [
        ".thrift"
    ],
    "patterns": [
        {
            "name": "comment.line.double-slash.thrift",
            "match": "//.*$",
            "comment": "Line comments"
        },
        {
            "name": "comment.block.thrift",
            "begin": "/\\*",
            "end": "\\*/",
            "comment": "Block comments"
        },
        {
            "name": "string.quoted.double.thrift",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.thrift",
                    "match": "\\\\(n|t|r|\\\\|\"|')"
                }
            ]
        },
        {
            "name": "string.quoted.single.thrift",
            "begin": "'",
            "end": "'",
            "patterns": [
                {
                    "name": "constant.character.escape.thrift",
                    "match": "\\\\(n|t|r|\\\\|\"|')"
                }
            ]
        },
        {
            "name": "constant.numeric.thrift",
            "match": "\\b(\\d+(\\.\\d+)?)\\b"
        },
        {
            "name": "keyword.other.thrift",
            "match": "\\b(namespace|include|cpp_include|const|typedef|extends|required|optional|oneway)\\b"
        },
        {
            "name": "keyword.other.thrift",
            "match": "\\b(struct|enum|union|exception|service)\\b"
        },
        {
            "name": "storage.type.thrift",
            "match": "\\b(void|bool|byte|i8|i16|i32|i64|double|string|binary|list|set|map)\\b"
        },
        {
            "name": "constant.language.thrift",
            "match": "\\b(true|false)\\b"
        },
        {
            "name": "entity.name.type.thrift",
            "match": "(?<=\\b(struct|enum|union|exception|service)\\s+)([A-Z][a-zA-Z0-9_]*)"
        },
        {
            "name": "variable.other.thrift",
            "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        }
    ]
}
